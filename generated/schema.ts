// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaultDebt(): BigInt {
    let value = this.get("vaultDebt");
    return value!.toBigInt();
  }

  set vaultDebt(value: BigInt) {
    this.set("vaultDebt", Value.fromBigInt(value));
  }

  get stabilisationFeeVaultSnapshot(): BigInt {
    let value = this.get("stabilisationFeeVaultSnapshot");
    return value!.toBigInt();
  }

  set stabilisationFeeVaultSnapshot(value: BigInt) {
    this.set("stabilisationFeeVaultSnapshot", Value.fromBigInt(value));
  }

  get globalStabilisationFeePerUSDVaultSnapshotD(): BigInt {
    let value = this.get("globalStabilisationFeePerUSDVaultSnapshotD");
    return value!.toBigInt();
  }

  set globalStabilisationFeePerUSDVaultSnapshotD(value: BigInt) {
    this.set(
      "globalStabilisationFeePerUSDVaultSnapshotD",
      Value.fromBigInt(value)
    );
  }

  get lastDebtUpdate(): BigInt {
    let value = this.get("lastDebtUpdate");
    return value!.toBigInt();
  }

  set lastDebtUpdate(value: BigInt) {
    this.set("lastDebtUpdate", Value.fromBigInt(value));
  }

  get uniV3Positions(): Array<string> {
    let value = this.get("uniV3Positions");
    return value!.toStringArray();
  }

  set uniV3Positions(value: Array<string>) {
    this.set("uniV3Positions", Value.fromStringArray(value));
  }
}

export class DebtMintedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DebtMintedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DebtMintedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DebtMintedEntity", id.toString(), this);
    }
  }

  static load(id: string): DebtMintedEntity | null {
    return changetype<DebtMintedEntity | null>(
      store.get("DebtMintedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get debtIncrease(): BigInt {
    let value = this.get("debtIncrease");
    return value!.toBigInt();
  }

  set debtIncrease(value: BigInt) {
    this.set("debtIncrease", Value.fromBigInt(value));
  }
}

export class DebtBurnedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DebtBurnedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DebtBurnedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DebtBurnedEntity", id.toString(), this);
    }
  }

  static load(id: string): DebtBurnedEntity | null {
    return changetype<DebtBurnedEntity | null>(
      store.get("DebtBurnedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get debtDecrease(): BigInt {
    let value = this.get("debtDecrease");
    return value!.toBigInt();
  }

  set debtDecrease(value: BigInt) {
    this.set("debtDecrease", Value.fromBigInt(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Deposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get uniV3Position(): BigInt {
    let value = this.get("uniV3Position");
    return value!.toBigInt();
  }

  set uniV3Position(value: BigInt) {
    this.set("uniV3Position", Value.fromBigInt(value));
  }
}

export class Withdrawal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Withdrawal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Withdrawal", id.toString(), this);
    }
  }

  static load(id: string): Withdrawal | null {
    return changetype<Withdrawal | null>(store.get("Withdrawal", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get uniV3Position(): BigInt {
    let value = this.get("uniV3Position");
    return value!.toBigInt();
  }

  set uniV3Position(value: BigInt) {
    this.set("uniV3Position", Value.fromBigInt(value));
  }
}

export class LiquidationThreshold extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LiquidationThreshold entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type LiquidationThreshold must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("LiquidationThreshold", id.toString(), this);
    }
  }

  static load(id: string): LiquidationThreshold | null {
    return changetype<LiquidationThreshold | null>(
      store.get("LiquidationThreshold", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidationThreshold(): BigInt {
    let value = this.get("liquidationThreshold");
    return value!.toBigInt();
  }

  set liquidationThreshold(value: BigInt) {
    this.set("liquidationThreshold", Value.fromBigInt(value));
  }
}

export class UniV3Position extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UniV3Position entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UniV3Position must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UniV3Position", id.toString(), this);
    }
  }

  static load(id: string): UniV3Position | null {
    return changetype<UniV3Position | null>(store.get("UniV3Position", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get liquidationThreshold(): string {
    let value = this.get("liquidationThreshold");
    return value!.toString();
  }

  set liquidationThreshold(value: string) {
    this.set("liquidationThreshold", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    return value!.toString();
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get liquidity(): BigInt {
    let value = this.get("liquidity");
    return value!.toBigInt();
  }

  set liquidity(value: BigInt) {
    this.set("liquidity", Value.fromBigInt(value));
  }

  get token0(): Bytes {
    let value = this.get("token0");
    return value!.toBytes();
  }

  set token0(value: Bytes) {
    this.set("token0", Value.fromBytes(value));
  }

  get token1(): Bytes {
    let value = this.get("token1");
    return value!.toBytes();
  }

  set token1(value: Bytes) {
    this.set("token1", Value.fromBytes(value));
  }

  get amount0(): BigInt {
    let value = this.get("amount0");
    return value!.toBigInt();
  }

  set amount0(value: BigInt) {
    this.set("amount0", Value.fromBigInt(value));
  }

  get amount1(): BigInt {
    let value = this.get("amount1");
    return value!.toBigInt();
  }

  set amount1(value: BigInt) {
    this.set("amount1", Value.fromBigInt(value));
  }

  get tickLower(): i32 {
    let value = this.get("tickLower");
    return value!.toI32();
  }

  set tickLower(value: i32) {
    this.set("tickLower", Value.fromI32(value));
  }

  get tickUpper(): i32 {
    let value = this.get("tickUpper");
    return value!.toI32();
  }

  set tickUpper(value: i32) {
    this.set("tickUpper", Value.fromI32(value));
  }
}
