// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BorrowThresholdChanged extends ethereum.Event {
  get params(): BorrowThresholdChanged__Params {
    return new BorrowThresholdChanged__Params(this);
  }
}

export class BorrowThresholdChanged__Params {
  _event: BorrowThresholdChanged;

  constructor(event: BorrowThresholdChanged) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get borrowThreshold(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CollateralDeposited extends ethereum.Event {
  get params(): CollateralDeposited__Params {
    return new CollateralDeposited__Params(this);
  }
}

export class CollateralDeposited__Params {
  _event: CollateralDeposited;

  constructor(event: CollateralDeposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralWithdrew extends ethereum.Event {
  get params(): CollateralWithdrew__Params {
    return new CollateralWithdrew__Params(this);
  }
}

export class CollateralWithdrew__Params {
  _event: CollateralWithdrew;

  constructor(event: CollateralWithdrew) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DebtBurned extends ethereum.Event {
  get params(): DebtBurned__Params {
    return new DebtBurned__Params(this);
  }
}

export class DebtBurned__Params {
  _event: DebtBurned;

  constructor(event: DebtBurned) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DebtMinted extends ethereum.Event {
  get params(): DebtMinted__Params {
    return new DebtMinted__Params(this);
  }
}

export class DebtMinted__Params {
  _event: DebtMinted;

  constructor(event: DebtMinted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidationFeeChanged extends ethereum.Event {
  get params(): LiquidationFeeChanged__Params {
    return new LiquidationFeeChanged__Params(this);
  }
}

export class LiquidationFeeChanged__Params {
  _event: LiquidationFeeChanged;

  constructor(event: LiquidationFeeChanged) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidationFeeD(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidationPremiumChanged extends ethereum.Event {
  get params(): LiquidationPremiumChanged__Params {
    return new LiquidationPremiumChanged__Params(this);
  }
}

export class LiquidationPremiumChanged__Params {
  _event: LiquidationPremiumChanged;

  constructor(event: LiquidationPremiumChanged) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get liquidationPremiumD(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidationThresholdChanged extends ethereum.Event {
  get params(): LiquidationThresholdChanged__Params {
    return new LiquidationThresholdChanged__Params(this);
  }
}

export class LiquidationThresholdChanged__Params {
  _event: LiquidationThresholdChanged;

  constructor(event: LiquidationThresholdChanged) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get liquidationThreshold(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LiquidationsPrivate extends ethereum.Event {
  get params(): LiquidationsPrivate__Params {
    return new LiquidationsPrivate__Params(this);
  }
}

export class LiquidationsPrivate__Params {
  _event: LiquidationsPrivate;

  constructor(event: LiquidationsPrivate) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LiquidationsPublic extends ethereum.Event {
  get params(): LiquidationsPublic__Params {
    return new LiquidationsPublic__Params(this);
  }
}

export class LiquidationsPublic__Params {
  _event: LiquidationsPublic;

  constructor(event: LiquidationsPublic) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MaxDebtPerVaultChanged extends ethereum.Event {
  get params(): MaxDebtPerVaultChanged__Params {
    return new MaxDebtPerVaultChanged__Params(this);
  }
}

export class MaxDebtPerVaultChanged__Params {
  _event: MaxDebtPerVaultChanged;

  constructor(event: MaxDebtPerVaultChanged) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get maxDebtPerVault(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MaxNftsPerVaultChanged extends ethereum.Event {
  get params(): MaxNftsPerVaultChanged__Params {
    return new MaxNftsPerVaultChanged__Params(this);
  }
}

export class MaxNftsPerVaultChanged__Params {
  _event: MaxNftsPerVaultChanged;

  constructor(event: MaxNftsPerVaultChanged) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get maxNftsPerVault(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class MinSingleNftCollateralChanged extends ethereum.Event {
  get params(): MinSingleNftCollateralChanged__Params {
    return new MinSingleNftCollateralChanged__Params(this);
  }
}

export class MinSingleNftCollateralChanged__Params {
  _event: MinSingleNftCollateralChanged;

  constructor(event: MinSingleNftCollateralChanged) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get minSingleNftCollateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MinWidthChanged extends ethereum.Event {
  get params(): MinWidthChanged__Params {
    return new MinWidthChanged__Params(this);
  }
}

export class MinWidthChanged__Params {
  _event: MinWidthChanged;

  constructor(event: MinWidthChanged) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get pool(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get minWidth(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class StabilisationFeeUpdated extends ethereum.Event {
  get params(): StabilisationFeeUpdated__Params {
    return new StabilisationFeeUpdated__Params(this);
  }
}

export class StabilisationFeeUpdated__Params {
  _event: StabilisationFeeUpdated;

  constructor(event: StabilisationFeeUpdated) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stabilisationFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SystemPaused extends ethereum.Event {
  get params(): SystemPaused__Params {
    return new SystemPaused__Params(this);
  }
}

export class SystemPaused__Params {
  _event: SystemPaused;

  constructor(event: SystemPaused) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SystemPrivate extends ethereum.Event {
  get params(): SystemPrivate__Params {
    return new SystemPrivate__Params(this);
  }
}

export class SystemPrivate__Params {
  _event: SystemPrivate;

  constructor(event: SystemPrivate) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SystemPublic extends ethereum.Event {
  get params(): SystemPublic__Params {
    return new SystemPublic__Params(this);
  }
}

export class SystemPublic__Params {
  _event: SystemPublic;

  constructor(event: SystemPublic) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SystemUnpaused extends ethereum.Event {
  get params(): SystemUnpaused__Params {
    return new SystemUnpaused__Params(this);
  }
}

export class SystemUnpaused__Params {
  _event: SystemUnpaused;

  constructor(event: SystemUnpaused) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class VaultClosed extends ethereum.Event {
  get params(): VaultClosed__Params {
    return new VaultClosed__Params(this);
  }
}

export class VaultClosed__Params {
  _event: VaultClosed;

  constructor(event: VaultClosed) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VaultLiquidated extends ethereum.Event {
  get params(): VaultLiquidated__Params {
    return new VaultLiquidated__Params(this);
  }
}

export class VaultLiquidated__Params {
  _event: VaultLiquidated;

  constructor(event: VaultLiquidated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VaultOpened extends ethereum.Event {
  get params(): VaultOpened__Params {
    return new VaultOpened__Params(this);
  }
}

export class VaultOpened__Params {
  _event: VaultOpened;

  constructor(event: VaultOpened) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Vault__calculateVaultCollateralResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getTotal(): BigInt {
    return this.value0;
  }

  getLiquidationLimit(): BigInt {
    return this.value1;
  }

  getBorrowLimit(): BigInt {
    return this.value2;
  }
}

export class Vault__collectResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class Vault__collectInputParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get amount0Max(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Max(): BigInt {
    return this[3].toBigInt();
  }
}

export class Vault__collectAndIncreaseAmountResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getDepositedLiquidity(): BigInt {
    return this.value0;
  }

  getDepositedAmount0(): BigInt {
    return this.value1;
  }

  getDepositedAmount1(): BigInt {
    return this.value2;
  }

  getReturnAmount0(): BigInt {
    return this.value3;
  }

  getReturnAmount1(): BigInt {
    return this.value4;
  }
}

export class Vault__collectAndIncreaseAmountInputCollectParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get amount0Max(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Max(): BigInt {
    return this[3].toBigInt();
  }
}

export class Vault__collectAndIncreaseAmountInputIncreaseLiquidityParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get amount0Desired(): BigInt {
    return this[1].toBigInt();
  }

  get amount1Desired(): BigInt {
    return this[2].toBigInt();
  }

  get amount0Min(): BigInt {
    return this[3].toBigInt();
  }

  get amount1Min(): BigInt {
    return this[4].toBigInt();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class Vault__decreaseLiquidityResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmount0(): BigInt {
    return this.value0;
  }

  getAmount1(): BigInt {
    return this.value1;
  }
}

export class Vault__decreaseLiquidityInputParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get liquidity(): BigInt {
    return this[1].toBigInt();
  }

  get amount0Min(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Min(): BigInt {
    return this[3].toBigInt();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }
}

export class Vault__poolParamsResultValue0Struct extends ethereum.Tuple {
  get liquidationThreshold(): BigInt {
    return this[0].toBigInt();
  }

  get borrowThreshold(): BigInt {
    return this[1].toBigInt();
  }

  get minWidth(): i32 {
    return this[2].toI32();
  }
}

export class Vault__protocolParamsResultValue0Struct extends ethereum.Tuple {
  get maxDebtPerVault(): BigInt {
    return this[0].toBigInt();
  }

  get minSingleNftCollateral(): BigInt {
    return this[1].toBigInt();
  }

  get liquidationFeeD(): BigInt {
    return this[2].toBigInt();
  }

  get liquidationPremiumD(): BigInt {
    return this[3].toBigInt();
  }

  get maxNftsPerVault(): i32 {
    return this[4].toI32();
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  ADMIN_DELEGATE_ROLE(): Bytes {
    let result = super.call(
      "ADMIN_DELEGATE_ROLE",
      "ADMIN_DELEGATE_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ADMIN_DELEGATE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ADMIN_DELEGATE_ROLE",
      "ADMIN_DELEGATE_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEBT_DENOMINATOR(): BigInt {
    let result = super.call(
      "DEBT_DENOMINATOR",
      "DEBT_DENOMINATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_DEBT_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "DEBT_DENOMINATOR",
      "DEBT_DENOMINATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DENOMINATOR(): BigInt {
    let result = super.call("DENOMINATOR", "DENOMINATOR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DENOMINATOR", "DENOMINATOR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OPERATOR(): Bytes {
    let result = super.call("OPERATOR", "OPERATOR():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OPERATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("OPERATOR", "OPERATOR():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  YEAR(): BigInt {
    let result = super.call("YEAR", "YEAR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_YEAR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("YEAR", "YEAR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateVaultCollateral(
    vaultId: BigInt
  ): Vault__calculateVaultCollateralResult {
    let result = super.call(
      "calculateVaultCollateral",
      "calculateVaultCollateral(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return new Vault__calculateVaultCollateralResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_calculateVaultCollateral(
    vaultId: BigInt
  ): ethereum.CallResult<Vault__calculateVaultCollateralResult> {
    let result = super.tryCall(
      "calculateVaultCollateral",
      "calculateVaultCollateral(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__calculateVaultCollateralResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  collect(params: Vault__collectInputParamsStruct): Vault__collectResult {
    let result = super.call(
      "collect",
      "collect((uint256,address,uint128,uint128)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return new Vault__collectResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_collect(
    params: Vault__collectInputParamsStruct
  ): ethereum.CallResult<Vault__collectResult> {
    let result = super.tryCall(
      "collect",
      "collect((uint256,address,uint128,uint128)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__collectResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collectAndIncreaseAmount(
    collectParams: Vault__collectAndIncreaseAmountInputCollectParamsStruct,
    increaseLiquidityParams: Vault__collectAndIncreaseAmountInputIncreaseLiquidityParamsStruct
  ): Vault__collectAndIncreaseAmountResult {
    let result = super.call(
      "collectAndIncreaseAmount",
      "collectAndIncreaseAmount((uint256,address,uint128,uint128),(uint256,uint256,uint256,uint256,uint256,uint256)):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromTuple(collectParams),
        ethereum.Value.fromTuple(increaseLiquidityParams)
      ]
    );

    return new Vault__collectAndIncreaseAmountResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_collectAndIncreaseAmount(
    collectParams: Vault__collectAndIncreaseAmountInputCollectParamsStruct,
    increaseLiquidityParams: Vault__collectAndIncreaseAmountInputIncreaseLiquidityParamsStruct
  ): ethereum.CallResult<Vault__collectAndIncreaseAmountResult> {
    let result = super.tryCall(
      "collectAndIncreaseAmount",
      "collectAndIncreaseAmount((uint256,address,uint128,uint128),(uint256,uint256,uint256,uint256,uint256,uint256)):(uint256,uint256,uint256,uint256,uint256)",
      [
        ethereum.Value.fromTuple(collectParams),
        ethereum.Value.fromTuple(increaseLiquidityParams)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__collectAndIncreaseAmountResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  decreaseLiquidity(
    params: Vault__decreaseLiquidityInputParamsStruct
  ): Vault__decreaseLiquidityResult {
    let result = super.call(
      "decreaseLiquidity",
      "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return new Vault__decreaseLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_decreaseLiquidity(
    params: Vault__decreaseLiquidityInputParamsStruct
  ): ethereum.CallResult<Vault__decreaseLiquidityResult> {
    let result = super.tryCall(
      "decreaseLiquidity",
      "decreaseLiquidity((uint256,uint128,uint256,uint256,uint256)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Vault__decreaseLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  depositorsAllowlist(): Array<Address> {
    let result = super.call(
      "depositorsAllowlist",
      "depositorsAllowlist():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_depositorsAllowlist(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "depositorsAllowlist",
      "depositorsAllowlist():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getOverallDebt(vaultId: BigInt): BigInt {
    let result = super.call(
      "getOverallDebt",
      "getOverallDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toBigInt();
  }

  try_getOverallDebt(vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOverallDebt",
      "getOverallDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAdmin(sender: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(sender)
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(sender: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(sender)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isLiquidatingPublic(): boolean {
    let result = super.call(
      "isLiquidatingPublic",
      "isLiquidatingPublic():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isLiquidatingPublic(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isLiquidatingPublic",
      "isLiquidatingPublic():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOperator(sender: Address): boolean {
    let result = super.call("isOperator", "isOperator(address):(bool)", [
      ethereum.Value.fromAddress(sender)
    ]);

    return result[0].toBoolean();
  }

  try_isOperator(sender: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOperator", "isOperator(address):(bool)", [
      ethereum.Value.fromAddress(sender)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPublic(): boolean {
    let result = super.call("isPublic", "isPublic():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPublic(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPublic", "isPublic():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidatorsAllowlist(): Array<Address> {
    let result = super.call(
      "liquidatorsAllowlist",
      "liquidatorsAllowlist():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_liquidatorsAllowlist(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "liquidatorsAllowlist",
      "liquidatorsAllowlist():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  mintDebtFromScratch(nft: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "mintDebtFromScratch",
      "mintDebtFromScratch(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(nft),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintDebtFromScratch(
    nft: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintDebtFromScratch",
      "mintDebtFromScratch(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(nft),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minter(): Address {
    let result = super.call("minter", "minter():(address)", []);

    return result[0].toAddress();
  }

  try_minter(): ethereum.CallResult<Address> {
    let result = super.tryCall("minter", "minter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  normalizationRate(): BigInt {
    let result = super.call(
      "normalizationRate",
      "normalizationRate():(uint216)",
      []
    );

    return result[0].toBigInt();
  }

  try_normalizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "normalizationRate",
      "normalizationRate():(uint216)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  normalizationRateUpdateTimestamp(): BigInt {
    let result = super.call(
      "normalizationRateUpdateTimestamp",
      "normalizationRateUpdateTimestamp():(uint40)",
      []
    );

    return result[0].toBigInt();
  }

  try_normalizationRateUpdateTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "normalizationRateUpdateTimestamp",
      "normalizationRateUpdateTimestamp():(uint40)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  normalizedGlobalDebt(): BigInt {
    let result = super.call(
      "normalizedGlobalDebt",
      "normalizedGlobalDebt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_normalizedGlobalDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "normalizedGlobalDebt",
      "normalizedGlobalDebt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    operator: Address,
    from: Address,
    tokenId: BigInt,
    data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(operator),
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  openVault(): BigInt {
    let result = super.call("openVault", "openVault():(uint256)", []);

    return result[0].toBigInt();
  }

  try_openVault(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("openVault", "openVault():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolParams(pool: Address): Vault__poolParamsResultValue0Struct {
    let result = super.call(
      "poolParams",
      "poolParams(address):((uint32,uint32,uint24))",
      [ethereum.Value.fromAddress(pool)]
    );

    return changetype<Vault__poolParamsResultValue0Struct>(result[0].toTuple());
  }

  try_poolParams(
    pool: Address
  ): ethereum.CallResult<Vault__poolParamsResultValue0Struct> {
    let result = super.tryCall(
      "poolParams",
      "poolParams(address):((uint32,uint32,uint24))",
      [ethereum.Value.fromAddress(pool)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__poolParamsResultValue0Struct>(value[0].toTuple())
    );
  }

  positionManager(): Address {
    let result = super.call(
      "positionManager",
      "positionManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_positionManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "positionManager",
      "positionManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolParams(): Vault__protocolParamsResultValue0Struct {
    let result = super.call(
      "protocolParams",
      "protocolParams():((uint256,uint256,uint32,uint32,uint8))",
      []
    );

    return changetype<Vault__protocolParamsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_protocolParams(): ethereum.CallResult<
    Vault__protocolParamsResultValue0Struct
  > {
    let result = super.tryCall(
      "protocolParams",
      "protocolParams():((uint256,uint256,uint32,uint32,uint8))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Vault__protocolParamsResultValue0Struct>(value[0].toTuple())
    );
  }

  stabilisationFeeRateD(): BigInt {
    let result = super.call(
      "stabilisationFeeRateD",
      "stabilisationFeeRateD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stabilisationFeeRateD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stabilisationFeeRateD",
      "stabilisationFeeRateD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  updateNormalizationRate(): BigInt {
    let result = super.call(
      "updateNormalizationRate",
      "updateNormalizationRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_updateNormalizationRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateNormalizationRate",
      "updateNormalizationRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultIdByNft(param0: BigInt): BigInt {
    let result = super.call("vaultIdByNft", "vaultIdByNft(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_vaultIdByNft(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultIdByNft",
      "vaultIdByNft(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultMintedDebt(param0: BigInt): BigInt {
    let result = super.call(
      "vaultMintedDebt",
      "vaultMintedDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_vaultMintedDebt(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultMintedDebt",
      "vaultMintedDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultNftsById(vaultId: BigInt): Array<BigInt> {
    let result = super.call(
      "vaultNftsById",
      "vaultNftsById(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toBigIntArray();
  }

  try_vaultNftsById(vaultId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "vaultNftsById",
      "vaultNftsById(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  vaultNormalizedDebt(param0: BigInt): BigInt {
    let result = super.call(
      "vaultNormalizedDebt",
      "vaultNormalizedDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_vaultNormalizedDebt(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "vaultNormalizedDebt",
      "vaultNormalizedDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultOwed(param0: BigInt): BigInt {
    let result = super.call("vaultOwed", "vaultOwed(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_vaultOwed(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultOwed", "vaultOwed(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultRegistry(): Address {
    let result = super.call("vaultRegistry", "vaultRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_vaultRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "vaultRegistry",
      "vaultRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  withdrawOwed(vaultId: BigInt, to: Address, maxAmount: BigInt): BigInt {
    let result = super.call(
      "withdrawOwed",
      "withdrawOwed(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(maxAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_withdrawOwed(
    vaultId: BigInt,
    to: Address,
    maxAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "withdrawOwed",
      "withdrawOwed(uint256,address,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(vaultId),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(maxAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get positionManager_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracle_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get treasury_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get token_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get minter_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get vaultRegistry_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddDepositorsToAllowlistCall extends ethereum.Call {
  get inputs(): AddDepositorsToAllowlistCall__Inputs {
    return new AddDepositorsToAllowlistCall__Inputs(this);
  }

  get outputs(): AddDepositorsToAllowlistCall__Outputs {
    return new AddDepositorsToAllowlistCall__Outputs(this);
  }
}

export class AddDepositorsToAllowlistCall__Inputs {
  _call: AddDepositorsToAllowlistCall;

  constructor(call: AddDepositorsToAllowlistCall) {
    this._call = call;
  }

  get depositors(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddDepositorsToAllowlistCall__Outputs {
  _call: AddDepositorsToAllowlistCall;

  constructor(call: AddDepositorsToAllowlistCall) {
    this._call = call;
  }
}

export class AddLiquidatorsToAllowlistCall extends ethereum.Call {
  get inputs(): AddLiquidatorsToAllowlistCall__Inputs {
    return new AddLiquidatorsToAllowlistCall__Inputs(this);
  }

  get outputs(): AddLiquidatorsToAllowlistCall__Outputs {
    return new AddLiquidatorsToAllowlistCall__Outputs(this);
  }
}

export class AddLiquidatorsToAllowlistCall__Inputs {
  _call: AddLiquidatorsToAllowlistCall;

  constructor(call: AddLiquidatorsToAllowlistCall) {
    this._call = call;
  }

  get liquidators(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddLiquidatorsToAllowlistCall__Outputs {
  _call: AddLiquidatorsToAllowlistCall;

  constructor(call: AddLiquidatorsToAllowlistCall) {
    this._call = call;
  }
}

export class BurnDebtCall extends ethereum.Call {
  get inputs(): BurnDebtCall__Inputs {
    return new BurnDebtCall__Inputs(this);
  }

  get outputs(): BurnDebtCall__Outputs {
    return new BurnDebtCall__Outputs(this);
  }
}

export class BurnDebtCall__Inputs {
  _call: BurnDebtCall;

  constructor(call: BurnDebtCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnDebtCall__Outputs {
  _call: BurnDebtCall;

  constructor(call: BurnDebtCall) {
    this._call = call;
  }
}

export class BurnVaultCall extends ethereum.Call {
  get inputs(): BurnVaultCall__Inputs {
    return new BurnVaultCall__Inputs(this);
  }

  get outputs(): BurnVaultCall__Outputs {
    return new BurnVaultCall__Outputs(this);
  }
}

export class BurnVaultCall__Inputs {
  _call: BurnVaultCall;

  constructor(call: BurnVaultCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnVaultCall__Outputs {
  _call: BurnVaultCall;

  constructor(call: BurnVaultCall) {
    this._call = call;
  }
}

export class ChangeLiquidationFeeCall extends ethereum.Call {
  get inputs(): ChangeLiquidationFeeCall__Inputs {
    return new ChangeLiquidationFeeCall__Inputs(this);
  }

  get outputs(): ChangeLiquidationFeeCall__Outputs {
    return new ChangeLiquidationFeeCall__Outputs(this);
  }
}

export class ChangeLiquidationFeeCall__Inputs {
  _call: ChangeLiquidationFeeCall;

  constructor(call: ChangeLiquidationFeeCall) {
    this._call = call;
  }

  get liquidationFeeD(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeLiquidationFeeCall__Outputs {
  _call: ChangeLiquidationFeeCall;

  constructor(call: ChangeLiquidationFeeCall) {
    this._call = call;
  }
}

export class ChangeLiquidationPremiumCall extends ethereum.Call {
  get inputs(): ChangeLiquidationPremiumCall__Inputs {
    return new ChangeLiquidationPremiumCall__Inputs(this);
  }

  get outputs(): ChangeLiquidationPremiumCall__Outputs {
    return new ChangeLiquidationPremiumCall__Outputs(this);
  }
}

export class ChangeLiquidationPremiumCall__Inputs {
  _call: ChangeLiquidationPremiumCall;

  constructor(call: ChangeLiquidationPremiumCall) {
    this._call = call;
  }

  get liquidationPremiumD(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeLiquidationPremiumCall__Outputs {
  _call: ChangeLiquidationPremiumCall;

  constructor(call: ChangeLiquidationPremiumCall) {
    this._call = call;
  }
}

export class ChangeMaxDebtPerVaultCall extends ethereum.Call {
  get inputs(): ChangeMaxDebtPerVaultCall__Inputs {
    return new ChangeMaxDebtPerVaultCall__Inputs(this);
  }

  get outputs(): ChangeMaxDebtPerVaultCall__Outputs {
    return new ChangeMaxDebtPerVaultCall__Outputs(this);
  }
}

export class ChangeMaxDebtPerVaultCall__Inputs {
  _call: ChangeMaxDebtPerVaultCall;

  constructor(call: ChangeMaxDebtPerVaultCall) {
    this._call = call;
  }

  get maxDebtPerVault(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMaxDebtPerVaultCall__Outputs {
  _call: ChangeMaxDebtPerVaultCall;

  constructor(call: ChangeMaxDebtPerVaultCall) {
    this._call = call;
  }
}

export class ChangeMaxNftsPerVaultCall extends ethereum.Call {
  get inputs(): ChangeMaxNftsPerVaultCall__Inputs {
    return new ChangeMaxNftsPerVaultCall__Inputs(this);
  }

  get outputs(): ChangeMaxNftsPerVaultCall__Outputs {
    return new ChangeMaxNftsPerVaultCall__Outputs(this);
  }
}

export class ChangeMaxNftsPerVaultCall__Inputs {
  _call: ChangeMaxNftsPerVaultCall;

  constructor(call: ChangeMaxNftsPerVaultCall) {
    this._call = call;
  }

  get maxNftsPerVault(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ChangeMaxNftsPerVaultCall__Outputs {
  _call: ChangeMaxNftsPerVaultCall;

  constructor(call: ChangeMaxNftsPerVaultCall) {
    this._call = call;
  }
}

export class ChangeMinSingleNftCollateralCall extends ethereum.Call {
  get inputs(): ChangeMinSingleNftCollateralCall__Inputs {
    return new ChangeMinSingleNftCollateralCall__Inputs(this);
  }

  get outputs(): ChangeMinSingleNftCollateralCall__Outputs {
    return new ChangeMinSingleNftCollateralCall__Outputs(this);
  }
}

export class ChangeMinSingleNftCollateralCall__Inputs {
  _call: ChangeMinSingleNftCollateralCall;

  constructor(call: ChangeMinSingleNftCollateralCall) {
    this._call = call;
  }

  get minSingleNftCollateral(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMinSingleNftCollateralCall__Outputs {
  _call: ChangeMinSingleNftCollateralCall;

  constructor(call: ChangeMinSingleNftCollateralCall) {
    this._call = call;
  }
}

export class CloseVaultCall extends ethereum.Call {
  get inputs(): CloseVaultCall__Inputs {
    return new CloseVaultCall__Inputs(this);
  }

  get outputs(): CloseVaultCall__Outputs {
    return new CloseVaultCall__Outputs(this);
  }
}

export class CloseVaultCall__Inputs {
  _call: CloseVaultCall;

  constructor(call: CloseVaultCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CloseVaultCall__Outputs {
  _call: CloseVaultCall;

  constructor(call: CloseVaultCall) {
    this._call = call;
  }
}

export class CollectCall extends ethereum.Call {
  get inputs(): CollectCall__Inputs {
    return new CollectCall__Inputs(this);
  }

  get outputs(): CollectCall__Outputs {
    return new CollectCall__Outputs(this);
  }
}

export class CollectCall__Inputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get params(): CollectCallParamsStruct {
    return changetype<CollectCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class CollectCall__Outputs {
  _call: CollectCall;

  constructor(call: CollectCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class CollectCallParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get amount0Max(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Max(): BigInt {
    return this[3].toBigInt();
  }
}

export class CollectAndIncreaseAmountCall extends ethereum.Call {
  get inputs(): CollectAndIncreaseAmountCall__Inputs {
    return new CollectAndIncreaseAmountCall__Inputs(this);
  }

  get outputs(): CollectAndIncreaseAmountCall__Outputs {
    return new CollectAndIncreaseAmountCall__Outputs(this);
  }
}

export class CollectAndIncreaseAmountCall__Inputs {
  _call: CollectAndIncreaseAmountCall;

  constructor(call: CollectAndIncreaseAmountCall) {
    this._call = call;
  }

  get collectParams(): CollectAndIncreaseAmountCallCollectParamsStruct {
    return changetype<CollectAndIncreaseAmountCallCollectParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get increaseLiquidityParams(): CollectAndIncreaseAmountCallIncreaseLiquidityParamsStruct {
    return changetype<
      CollectAndIncreaseAmountCallIncreaseLiquidityParamsStruct
    >(this._call.inputValues[1].value.toTuple());
  }
}

export class CollectAndIncreaseAmountCall__Outputs {
  _call: CollectAndIncreaseAmountCall;

  constructor(call: CollectAndIncreaseAmountCall) {
    this._call = call;
  }

  get depositedLiquidity(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get depositedAmount0(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }

  get depositedAmount1(): BigInt {
    return this._call.outputValues[2].value.toBigInt();
  }

  get returnAmount0(): BigInt {
    return this._call.outputValues[3].value.toBigInt();
  }

  get returnAmount1(): BigInt {
    return this._call.outputValues[4].value.toBigInt();
  }
}

export class CollectAndIncreaseAmountCallCollectParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get recipient(): Address {
    return this[1].toAddress();
  }

  get amount0Max(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Max(): BigInt {
    return this[3].toBigInt();
  }
}

export class CollectAndIncreaseAmountCallIncreaseLiquidityParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get amount0Desired(): BigInt {
    return this[1].toBigInt();
  }

  get amount1Desired(): BigInt {
    return this[2].toBigInt();
  }

  get amount0Min(): BigInt {
    return this[3].toBigInt();
  }

  get amount1Min(): BigInt {
    return this[4].toBigInt();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }
}

export class DecreaseLiquidityCall extends ethereum.Call {
  get inputs(): DecreaseLiquidityCall__Inputs {
    return new DecreaseLiquidityCall__Inputs(this);
  }

  get outputs(): DecreaseLiquidityCall__Outputs {
    return new DecreaseLiquidityCall__Outputs(this);
  }
}

export class DecreaseLiquidityCall__Inputs {
  _call: DecreaseLiquidityCall;

  constructor(call: DecreaseLiquidityCall) {
    this._call = call;
  }

  get params(): DecreaseLiquidityCallParamsStruct {
    return changetype<DecreaseLiquidityCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class DecreaseLiquidityCall__Outputs {
  _call: DecreaseLiquidityCall;

  constructor(call: DecreaseLiquidityCall) {
    this._call = call;
  }

  get amount0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get amount1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class DecreaseLiquidityCallParamsStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get liquidity(): BigInt {
    return this[1].toBigInt();
  }

  get amount0Min(): BigInt {
    return this[2].toBigInt();
  }

  get amount1Min(): BigInt {
    return this[3].toBigInt();
  }

  get deadline(): BigInt {
    return this[4].toBigInt();
  }
}

export class DepositCollateralCall extends ethereum.Call {
  get inputs(): DepositCollateralCall__Inputs {
    return new DepositCollateralCall__Inputs(this);
  }

  get outputs(): DepositCollateralCall__Outputs {
    return new DepositCollateralCall__Outputs(this);
  }
}

export class DepositCollateralCall__Inputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nft(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCollateralCall__Outputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get stabilisationFee_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxDebtPerVault(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class MakeLiquidationsPrivateCall extends ethereum.Call {
  get inputs(): MakeLiquidationsPrivateCall__Inputs {
    return new MakeLiquidationsPrivateCall__Inputs(this);
  }

  get outputs(): MakeLiquidationsPrivateCall__Outputs {
    return new MakeLiquidationsPrivateCall__Outputs(this);
  }
}

export class MakeLiquidationsPrivateCall__Inputs {
  _call: MakeLiquidationsPrivateCall;

  constructor(call: MakeLiquidationsPrivateCall) {
    this._call = call;
  }
}

export class MakeLiquidationsPrivateCall__Outputs {
  _call: MakeLiquidationsPrivateCall;

  constructor(call: MakeLiquidationsPrivateCall) {
    this._call = call;
  }
}

export class MakeLiquidationsPublicCall extends ethereum.Call {
  get inputs(): MakeLiquidationsPublicCall__Inputs {
    return new MakeLiquidationsPublicCall__Inputs(this);
  }

  get outputs(): MakeLiquidationsPublicCall__Outputs {
    return new MakeLiquidationsPublicCall__Outputs(this);
  }
}

export class MakeLiquidationsPublicCall__Inputs {
  _call: MakeLiquidationsPublicCall;

  constructor(call: MakeLiquidationsPublicCall) {
    this._call = call;
  }
}

export class MakeLiquidationsPublicCall__Outputs {
  _call: MakeLiquidationsPublicCall;

  constructor(call: MakeLiquidationsPublicCall) {
    this._call = call;
  }
}

export class MakePrivateCall extends ethereum.Call {
  get inputs(): MakePrivateCall__Inputs {
    return new MakePrivateCall__Inputs(this);
  }

  get outputs(): MakePrivateCall__Outputs {
    return new MakePrivateCall__Outputs(this);
  }
}

export class MakePrivateCall__Inputs {
  _call: MakePrivateCall;

  constructor(call: MakePrivateCall) {
    this._call = call;
  }
}

export class MakePrivateCall__Outputs {
  _call: MakePrivateCall;

  constructor(call: MakePrivateCall) {
    this._call = call;
  }
}

export class MakePublicCall extends ethereum.Call {
  get inputs(): MakePublicCall__Inputs {
    return new MakePublicCall__Inputs(this);
  }

  get outputs(): MakePublicCall__Outputs {
    return new MakePublicCall__Outputs(this);
  }
}

export class MakePublicCall__Inputs {
  _call: MakePublicCall;

  constructor(call: MakePublicCall) {
    this._call = call;
  }
}

export class MakePublicCall__Outputs {
  _call: MakePublicCall;

  constructor(call: MakePublicCall) {
    this._call = call;
  }
}

export class MintDebtCall extends ethereum.Call {
  get inputs(): MintDebtCall__Inputs {
    return new MintDebtCall__Inputs(this);
  }

  get outputs(): MintDebtCall__Outputs {
    return new MintDebtCall__Outputs(this);
  }
}

export class MintDebtCall__Inputs {
  _call: MintDebtCall;

  constructor(call: MintDebtCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintDebtCall__Outputs {
  _call: MintDebtCall;

  constructor(call: MintDebtCall) {
    this._call = call;
  }
}

export class MintDebtFromScratchCall extends ethereum.Call {
  get inputs(): MintDebtFromScratchCall__Inputs {
    return new MintDebtFromScratchCall__Inputs(this);
  }

  get outputs(): MintDebtFromScratchCall__Outputs {
    return new MintDebtFromScratchCall__Outputs(this);
  }
}

export class MintDebtFromScratchCall__Inputs {
  _call: MintDebtFromScratchCall;

  constructor(call: MintDebtFromScratchCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintDebtFromScratchCall__Outputs {
  _call: MintDebtFromScratchCall;

  constructor(call: MintDebtFromScratchCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class OnERC721ReceivedCall extends ethereum.Call {
  get inputs(): OnERC721ReceivedCall__Inputs {
    return new OnERC721ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC721ReceivedCall__Outputs {
    return new OnERC721ReceivedCall__Outputs(this);
  }
}

export class OnERC721ReceivedCall__Inputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class OnERC721ReceivedCall__Outputs {
  _call: OnERC721ReceivedCall;

  constructor(call: OnERC721ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OpenVaultCall extends ethereum.Call {
  get inputs(): OpenVaultCall__Inputs {
    return new OpenVaultCall__Inputs(this);
  }

  get outputs(): OpenVaultCall__Outputs {
    return new OpenVaultCall__Outputs(this);
  }
}

export class OpenVaultCall__Inputs {
  _call: OpenVaultCall;

  constructor(call: OpenVaultCall) {
    this._call = call;
  }
}

export class OpenVaultCall__Outputs {
  _call: OpenVaultCall;

  constructor(call: OpenVaultCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveDepositorsFromAllowlistCall extends ethereum.Call {
  get inputs(): RemoveDepositorsFromAllowlistCall__Inputs {
    return new RemoveDepositorsFromAllowlistCall__Inputs(this);
  }

  get outputs(): RemoveDepositorsFromAllowlistCall__Outputs {
    return new RemoveDepositorsFromAllowlistCall__Outputs(this);
  }
}

export class RemoveDepositorsFromAllowlistCall__Inputs {
  _call: RemoveDepositorsFromAllowlistCall;

  constructor(call: RemoveDepositorsFromAllowlistCall) {
    this._call = call;
  }

  get depositors(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveDepositorsFromAllowlistCall__Outputs {
  _call: RemoveDepositorsFromAllowlistCall;

  constructor(call: RemoveDepositorsFromAllowlistCall) {
    this._call = call;
  }
}

export class RemoveLiquidatorsFromAllowlistCall extends ethereum.Call {
  get inputs(): RemoveLiquidatorsFromAllowlistCall__Inputs {
    return new RemoveLiquidatorsFromAllowlistCall__Inputs(this);
  }

  get outputs(): RemoveLiquidatorsFromAllowlistCall__Outputs {
    return new RemoveLiquidatorsFromAllowlistCall__Outputs(this);
  }
}

export class RemoveLiquidatorsFromAllowlistCall__Inputs {
  _call: RemoveLiquidatorsFromAllowlistCall;

  constructor(call: RemoveLiquidatorsFromAllowlistCall) {
    this._call = call;
  }

  get liquidators(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveLiquidatorsFromAllowlistCall__Outputs {
  _call: RemoveLiquidatorsFromAllowlistCall;

  constructor(call: RemoveLiquidatorsFromAllowlistCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetPoolParamsCall extends ethereum.Call {
  get inputs(): SetPoolParamsCall__Inputs {
    return new SetPoolParamsCall__Inputs(this);
  }

  get outputs(): SetPoolParamsCall__Outputs {
    return new SetPoolParamsCall__Outputs(this);
  }
}

export class SetPoolParamsCall__Inputs {
  _call: SetPoolParamsCall;

  constructor(call: SetPoolParamsCall) {
    this._call = call;
  }

  get pool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get params(): SetPoolParamsCallParamsStruct {
    return changetype<SetPoolParamsCallParamsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class SetPoolParamsCall__Outputs {
  _call: SetPoolParamsCall;

  constructor(call: SetPoolParamsCall) {
    this._call = call;
  }
}

export class SetPoolParamsCallParamsStruct extends ethereum.Tuple {
  get liquidationThreshold(): BigInt {
    return this[0].toBigInt();
  }

  get borrowThreshold(): BigInt {
    return this[1].toBigInt();
  }

  get minWidth(): i32 {
    return this[2].toI32();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateNormalizationRateCall extends ethereum.Call {
  get inputs(): UpdateNormalizationRateCall__Inputs {
    return new UpdateNormalizationRateCall__Inputs(this);
  }

  get outputs(): UpdateNormalizationRateCall__Outputs {
    return new UpdateNormalizationRateCall__Outputs(this);
  }
}

export class UpdateNormalizationRateCall__Inputs {
  _call: UpdateNormalizationRateCall;

  constructor(call: UpdateNormalizationRateCall) {
    this._call = call;
  }
}

export class UpdateNormalizationRateCall__Outputs {
  _call: UpdateNormalizationRateCall;

  constructor(call: UpdateNormalizationRateCall) {
    this._call = call;
  }

  get updatedNormalizationRate(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateStabilisationFeeRateCall extends ethereum.Call {
  get inputs(): UpdateStabilisationFeeRateCall__Inputs {
    return new UpdateStabilisationFeeRateCall__Inputs(this);
  }

  get outputs(): UpdateStabilisationFeeRateCall__Outputs {
    return new UpdateStabilisationFeeRateCall__Outputs(this);
  }
}

export class UpdateStabilisationFeeRateCall__Inputs {
  _call: UpdateStabilisationFeeRateCall;

  constructor(call: UpdateStabilisationFeeRateCall) {
    this._call = call;
  }

  get stabilisationFeeRateD_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateStabilisationFeeRateCall__Outputs {
  _call: UpdateStabilisationFeeRateCall;

  constructor(call: UpdateStabilisationFeeRateCall) {
    this._call = call;
  }
}

export class WithdrawCollateralCall extends ethereum.Call {
  get inputs(): WithdrawCollateralCall__Inputs {
    return new WithdrawCollateralCall__Inputs(this);
  }

  get outputs(): WithdrawCollateralCall__Outputs {
    return new WithdrawCollateralCall__Outputs(this);
  }
}

export class WithdrawCollateralCall__Inputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCollateralCall__Outputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }
}

export class WithdrawOwedCall extends ethereum.Call {
  get inputs(): WithdrawOwedCall__Inputs {
    return new WithdrawOwedCall__Inputs(this);
  }

  get outputs(): WithdrawOwedCall__Outputs {
    return new WithdrawOwedCall__Outputs(this);
  }
}

export class WithdrawOwedCall__Inputs {
  _call: WithdrawOwedCall;

  constructor(call: WithdrawOwedCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get maxAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class WithdrawOwedCall__Outputs {
  _call: WithdrawOwedCall;

  constructor(call: WithdrawOwedCall) {
    this._call = call;
  }

  get withdrawnAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
