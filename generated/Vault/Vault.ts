// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CollateralDeposited extends ethereum.Event {
  get params(): CollateralDeposited__Params {
    return new CollateralDeposited__Params(this);
  }
}

export class CollateralDeposited__Params {
  _event: CollateralDeposited;

  constructor(event: CollateralDeposited) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CollateralWithdrew extends ethereum.Event {
  get params(): CollateralWithdrew__Params {
    return new CollateralWithdrew__Params(this);
  }
}

export class CollateralWithdrew__Params {
  _event: CollateralWithdrew;

  constructor(event: CollateralWithdrew) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DebtBurned extends ethereum.Event {
  get params(): DebtBurned__Params {
    return new DebtBurned__Params(this);
  }
}

export class DebtBurned__Params {
  _event: DebtBurned;

  constructor(event: DebtBurned) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class DebtMinted extends ethereum.Event {
  get params(): DebtMinted__Params {
    return new DebtMinted__Params(this);
  }
}

export class DebtMinted__Params {
  _event: DebtMinted;

  constructor(event: DebtMinted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OracleUpdated extends ethereum.Event {
  get params(): OracleUpdated__Params {
    return new OracleUpdated__Params(this);
  }
}

export class OracleUpdated__Params {
  _event: OracleUpdated;

  constructor(event: OracleUpdated) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oracleAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class StabilisationFeeUpdated extends ethereum.Event {
  get params(): StabilisationFeeUpdated__Params {
    return new StabilisationFeeUpdated__Params(this);
  }
}

export class StabilisationFeeUpdated__Params {
  _event: StabilisationFeeUpdated;

  constructor(event: StabilisationFeeUpdated) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stabilisationFee(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SystemPaused extends ethereum.Event {
  get params(): SystemPaused__Params {
    return new SystemPaused__Params(this);
  }
}

export class SystemPaused__Params {
  _event: SystemPaused;

  constructor(event: SystemPaused) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SystemPrivate extends ethereum.Event {
  get params(): SystemPrivate__Params {
    return new SystemPrivate__Params(this);
  }
}

export class SystemPrivate__Params {
  _event: SystemPrivate;

  constructor(event: SystemPrivate) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SystemPublic extends ethereum.Event {
  get params(): SystemPublic__Params {
    return new SystemPublic__Params(this);
  }
}

export class SystemPublic__Params {
  _event: SystemPublic;

  constructor(event: SystemPublic) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SystemUnpaused extends ethereum.Event {
  get params(): SystemUnpaused__Params {
    return new SystemUnpaused__Params(this);
  }
}

export class SystemUnpaused__Params {
  _event: SystemUnpaused;

  constructor(event: SystemUnpaused) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenSet extends ethereum.Event {
  get params(): TokenSet__Params {
    return new TokenSet__Params(this);
  }
}

export class TokenSet__Params {
  _event: TokenSet;

  constructor(event: TokenSet) {
    this._event = event;
  }

  get origin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class VaultClosed extends ethereum.Event {
  get params(): VaultClosed__Params {
    return new VaultClosed__Params(this);
  }
}

export class VaultClosed__Params {
  _event: VaultClosed;

  constructor(event: VaultClosed) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VaultLiquidated extends ethereum.Event {
  get params(): VaultLiquidated__Params {
    return new VaultLiquidated__Params(this);
  }
}

export class VaultLiquidated__Params {
  _event: VaultLiquidated;

  constructor(event: VaultLiquidated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VaultOpened extends ethereum.Event {
  get params(): VaultOpened__Params {
    return new VaultOpened__Params(this);
  }
}

export class VaultOpened__Params {
  _event: VaultOpened;

  constructor(event: VaultOpened) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get vaultId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  ADMIN_DELEGATE_ROLE(): Bytes {
    let result = super.call(
      "ADMIN_DELEGATE_ROLE",
      "ADMIN_DELEGATE_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ADMIN_DELEGATE_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ADMIN_DELEGATE_ROLE",
      "ADMIN_DELEGATE_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DENOMINATOR(): BigInt {
    let result = super.call("DENOMINATOR", "DENOMINATOR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DENOMINATOR", "DENOMINATOR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OPERATOR(): Bytes {
    let result = super.call("OPERATOR", "OPERATOR():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OPERATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("OPERATOR", "OPERATOR():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  Q48(): BigInt {
    let result = super.call("Q48", "Q48():(uint256)", []);

    return result[0].toBigInt();
  }

  try_Q48(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("Q48", "Q48():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  Q96(): BigInt {
    let result = super.call("Q96", "Q96():(uint256)", []);

    return result[0].toBigInt();
  }

  try_Q96(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("Q96", "Q96():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  YEAR(): BigInt {
    let result = super.call("YEAR", "YEAR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_YEAR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("YEAR", "YEAR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateVaultAdjustedCollateral(vaultId: BigInt): BigInt {
    let result = super.call(
      "calculateVaultAdjustedCollateral",
      "calculateVaultAdjustedCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toBigInt();
  }

  try_calculateVaultAdjustedCollateral(
    vaultId: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateVaultAdjustedCollateral",
      "calculateVaultAdjustedCollateral(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositorsAllowlist(): Array<Address> {
    let result = super.call(
      "depositorsAllowlist",
      "depositorsAllowlist():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_depositorsAllowlist(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "depositorsAllowlist",
      "depositorsAllowlist():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOverallDebt(vaultId: BigInt): BigInt {
    let result = super.call(
      "getOverallDebt",
      "getOverallDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toBigInt();
  }

  try_getOverallDebt(vaultId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOverallDebt",
      "getOverallDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  globalStabilisationFeePerUSDD(): BigInt {
    let result = super.call(
      "globalStabilisationFeePerUSDD",
      "globalStabilisationFeePerUSDD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_globalStabilisationFeePerUSDD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "globalStabilisationFeePerUSDD",
      "globalStabilisationFeePerUSDD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  globalStabilisationFeePerUSDSnapshotD(): BigInt {
    let result = super.call(
      "globalStabilisationFeePerUSDSnapshotD",
      "globalStabilisationFeePerUSDSnapshotD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_globalStabilisationFeePerUSDSnapshotD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "globalStabilisationFeePerUSDSnapshotD",
      "globalStabilisationFeePerUSDSnapshotD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  globalStabilisationFeePerUSDSnapshotTimestamp(): BigInt {
    let result = super.call(
      "globalStabilisationFeePerUSDSnapshotTimestamp",
      "globalStabilisationFeePerUSDSnapshotTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_globalStabilisationFeePerUSDSnapshotTimestamp(): ethereum.CallResult<
    BigInt
  > {
    let result = super.tryCall(
      "globalStabilisationFeePerUSDSnapshotTimestamp",
      "globalStabilisationFeePerUSDSnapshotTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAdmin(sender: Address): boolean {
    let result = super.call("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(sender)
    ]);

    return result[0].toBoolean();
  }

  try_isAdmin(sender: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAdmin", "isAdmin(address):(bool)", [
      ethereum.Value.fromAddress(sender)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOperator(sender: Address): boolean {
    let result = super.call("isOperator", "isOperator(address):(bool)", [
      ethereum.Value.fromAddress(sender)
    ]);

    return result[0].toBoolean();
  }

  try_isOperator(sender: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOperator", "isOperator(address):(bool)", [
      ethereum.Value.fromAddress(sender)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPaused(): boolean {
    let result = super.call("isPaused", "isPaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPaused", "isPaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPrivate(): boolean {
    let result = super.call("isPrivate", "isPrivate():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPrivate(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPrivate", "isPrivate():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintDebtFromScratch(nft: BigInt, amount: BigInt): BigInt {
    let result = super.call(
      "mintDebtFromScratch",
      "mintDebtFromScratch(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(nft),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintDebtFromScratch(
    nft: BigInt,
    amount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintDebtFromScratch",
      "mintDebtFromScratch(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(nft),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  openVault(): BigInt {
    let result = super.call("openVault", "openVault():(uint256)", []);

    return result[0].toBigInt();
  }

  try_openVault(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("openVault", "openVault():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownedVaultsByAddress(target: Address): Array<BigInt> {
    let result = super.call(
      "ownedVaultsByAddress",
      "ownedVaultsByAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(target)]
    );

    return result[0].toBigIntArray();
  }

  try_ownedVaultsByAddress(
    target: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "ownedVaultsByAddress",
      "ownedVaultsByAddress(address):(uint256[])",
      [ethereum.Value.fromAddress(target)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  positionManager(): Address {
    let result = super.call(
      "positionManager",
      "positionManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_positionManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "positionManager",
      "positionManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolGovernance(): Address {
    let result = super.call(
      "protocolGovernance",
      "protocolGovernance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_protocolGovernance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocolGovernance",
      "protocolGovernance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stabilisationFeeRateD(): BigInt {
    let result = super.call(
      "stabilisationFeeRateD",
      "stabilisationFeeRateD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_stabilisationFeeRateD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stabilisationFeeRateD",
      "stabilisationFeeRateD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stabilisationFeeVaultSnapshot(param0: BigInt): BigInt {
    let result = super.call(
      "stabilisationFeeVaultSnapshot",
      "stabilisationFeeVaultSnapshot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_stabilisationFeeVaultSnapshot(
    param0: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stabilisationFeeVaultSnapshot",
      "stabilisationFeeVaultSnapshot(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  vaultCount(): BigInt {
    let result = super.call("vaultCount", "vaultCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_vaultCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultCount", "vaultCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultDebt(param0: BigInt): BigInt {
    let result = super.call("vaultDebt", "vaultDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_vaultDebt(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vaultDebt", "vaultDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vaultNftsById(vaultId: BigInt): Array<BigInt> {
    let result = super.call(
      "vaultNftsById",
      "vaultNftsById(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );

    return result[0].toBigIntArray();
  }

  try_vaultNftsById(vaultId: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "vaultNftsById",
      "vaultNftsById(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(vaultId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  vaultOwner(param0: BigInt): Address {
    let result = super.call("vaultOwner", "vaultOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_vaultOwner(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("vaultOwner", "vaultOwner(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get positionManager_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get factory_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get protocolGovernance_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get oracle_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get treasury_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get stabilisationFee_(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddDepositorsToAllowlistCall extends ethereum.Call {
  get inputs(): AddDepositorsToAllowlistCall__Inputs {
    return new AddDepositorsToAllowlistCall__Inputs(this);
  }

  get outputs(): AddDepositorsToAllowlistCall__Outputs {
    return new AddDepositorsToAllowlistCall__Outputs(this);
  }
}

export class AddDepositorsToAllowlistCall__Inputs {
  _call: AddDepositorsToAllowlistCall;

  constructor(call: AddDepositorsToAllowlistCall) {
    this._call = call;
  }

  get depositors(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddDepositorsToAllowlistCall__Outputs {
  _call: AddDepositorsToAllowlistCall;

  constructor(call: AddDepositorsToAllowlistCall) {
    this._call = call;
  }
}

export class BurnDebtCall extends ethereum.Call {
  get inputs(): BurnDebtCall__Inputs {
    return new BurnDebtCall__Inputs(this);
  }

  get outputs(): BurnDebtCall__Outputs {
    return new BurnDebtCall__Outputs(this);
  }
}

export class BurnDebtCall__Inputs {
  _call: BurnDebtCall;

  constructor(call: BurnDebtCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnDebtCall__Outputs {
  _call: BurnDebtCall;

  constructor(call: BurnDebtCall) {
    this._call = call;
  }
}

export class CloseVaultCall extends ethereum.Call {
  get inputs(): CloseVaultCall__Inputs {
    return new CloseVaultCall__Inputs(this);
  }

  get outputs(): CloseVaultCall__Outputs {
    return new CloseVaultCall__Outputs(this);
  }
}

export class CloseVaultCall__Inputs {
  _call: CloseVaultCall;

  constructor(call: CloseVaultCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get collateralRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CloseVaultCall__Outputs {
  _call: CloseVaultCall;

  constructor(call: CloseVaultCall) {
    this._call = call;
  }
}

export class DepositAndMintCall extends ethereum.Call {
  get inputs(): DepositAndMintCall__Inputs {
    return new DepositAndMintCall__Inputs(this);
  }

  get outputs(): DepositAndMintCall__Outputs {
    return new DepositAndMintCall__Outputs(this);
  }
}

export class DepositAndMintCall__Inputs {
  _call: DepositAndMintCall;

  constructor(call: DepositAndMintCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nft(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class DepositAndMintCall__Outputs {
  _call: DepositAndMintCall;

  constructor(call: DepositAndMintCall) {
    this._call = call;
  }
}

export class DepositCollateralCall extends ethereum.Call {
  get inputs(): DepositCollateralCall__Inputs {
    return new DepositCollateralCall__Inputs(this);
  }

  get outputs(): DepositCollateralCall__Outputs {
    return new DepositCollateralCall__Outputs(this);
  }
}

export class DepositCollateralCall__Inputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nft(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositCollateralCall__Outputs {
  _call: DepositCollateralCall;

  constructor(call: DepositCollateralCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class MakePrivateCall extends ethereum.Call {
  get inputs(): MakePrivateCall__Inputs {
    return new MakePrivateCall__Inputs(this);
  }

  get outputs(): MakePrivateCall__Outputs {
    return new MakePrivateCall__Outputs(this);
  }
}

export class MakePrivateCall__Inputs {
  _call: MakePrivateCall;

  constructor(call: MakePrivateCall) {
    this._call = call;
  }
}

export class MakePrivateCall__Outputs {
  _call: MakePrivateCall;

  constructor(call: MakePrivateCall) {
    this._call = call;
  }
}

export class MakePublicCall extends ethereum.Call {
  get inputs(): MakePublicCall__Inputs {
    return new MakePublicCall__Inputs(this);
  }

  get outputs(): MakePublicCall__Outputs {
    return new MakePublicCall__Outputs(this);
  }
}

export class MakePublicCall__Inputs {
  _call: MakePublicCall;

  constructor(call: MakePublicCall) {
    this._call = call;
  }
}

export class MakePublicCall__Outputs {
  _call: MakePublicCall;

  constructor(call: MakePublicCall) {
    this._call = call;
  }
}

export class MintDebtCall extends ethereum.Call {
  get inputs(): MintDebtCall__Inputs {
    return new MintDebtCall__Inputs(this);
  }

  get outputs(): MintDebtCall__Outputs {
    return new MintDebtCall__Outputs(this);
  }
}

export class MintDebtCall__Inputs {
  _call: MintDebtCall;

  constructor(call: MintDebtCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintDebtCall__Outputs {
  _call: MintDebtCall;

  constructor(call: MintDebtCall) {
    this._call = call;
  }
}

export class MintDebtFromScratchCall extends ethereum.Call {
  get inputs(): MintDebtFromScratchCall__Inputs {
    return new MintDebtFromScratchCall__Inputs(this);
  }

  get outputs(): MintDebtFromScratchCall__Outputs {
    return new MintDebtFromScratchCall__Outputs(this);
  }
}

export class MintDebtFromScratchCall__Inputs {
  _call: MintDebtFromScratchCall;

  constructor(call: MintDebtFromScratchCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintDebtFromScratchCall__Outputs {
  _call: MintDebtFromScratchCall;

  constructor(call: MintDebtFromScratchCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class OpenVaultCall extends ethereum.Call {
  get inputs(): OpenVaultCall__Inputs {
    return new OpenVaultCall__Inputs(this);
  }

  get outputs(): OpenVaultCall__Outputs {
    return new OpenVaultCall__Outputs(this);
  }
}

export class OpenVaultCall__Inputs {
  _call: OpenVaultCall;

  constructor(call: OpenVaultCall) {
    this._call = call;
  }
}

export class OpenVaultCall__Outputs {
  _call: OpenVaultCall;

  constructor(call: OpenVaultCall) {
    this._call = call;
  }

  get vaultId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveDepositorsFromAllowlistCall extends ethereum.Call {
  get inputs(): RemoveDepositorsFromAllowlistCall__Inputs {
    return new RemoveDepositorsFromAllowlistCall__Inputs(this);
  }

  get outputs(): RemoveDepositorsFromAllowlistCall__Outputs {
    return new RemoveDepositorsFromAllowlistCall__Outputs(this);
  }
}

export class RemoveDepositorsFromAllowlistCall__Inputs {
  _call: RemoveDepositorsFromAllowlistCall;

  constructor(call: RemoveDepositorsFromAllowlistCall) {
    this._call = call;
  }

  get depositors(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveDepositorsFromAllowlistCall__Outputs {
  _call: RemoveDepositorsFromAllowlistCall;

  constructor(call: RemoveDepositorsFromAllowlistCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetOracleCall extends ethereum.Call {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get oracle_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }
}

export class SetTokenCall extends ethereum.Call {
  get inputs(): SetTokenCall__Inputs {
    return new SetTokenCall__Inputs(this);
  }

  get outputs(): SetTokenCall__Outputs {
    return new SetTokenCall__Outputs(this);
  }
}

export class SetTokenCall__Inputs {
  _call: SetTokenCall;

  constructor(call: SetTokenCall) {
    this._call = call;
  }

  get token_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTokenCall__Outputs {
  _call: SetTokenCall;

  constructor(call: SetTokenCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateStabilisationFeeRateCall extends ethereum.Call {
  get inputs(): UpdateStabilisationFeeRateCall__Inputs {
    return new UpdateStabilisationFeeRateCall__Inputs(this);
  }

  get outputs(): UpdateStabilisationFeeRateCall__Outputs {
    return new UpdateStabilisationFeeRateCall__Outputs(this);
  }
}

export class UpdateStabilisationFeeRateCall__Inputs {
  _call: UpdateStabilisationFeeRateCall;

  constructor(call: UpdateStabilisationFeeRateCall) {
    this._call = call;
  }

  get stabilisationFeeRateD_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateStabilisationFeeRateCall__Outputs {
  _call: UpdateStabilisationFeeRateCall;

  constructor(call: UpdateStabilisationFeeRateCall) {
    this._call = call;
  }
}

export class WithdrawCollateralCall extends ethereum.Call {
  get inputs(): WithdrawCollateralCall__Inputs {
    return new WithdrawCollateralCall__Inputs(this);
  }

  get outputs(): WithdrawCollateralCall__Outputs {
    return new WithdrawCollateralCall__Outputs(this);
  }
}

export class WithdrawCollateralCall__Inputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }

  get nft(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCollateralCall__Outputs {
  _call: WithdrawCollateralCall;

  constructor(call: WithdrawCollateralCall) {
    this._call = call;
  }
}
